{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","clipboard","setClipboard","geolocation","setGeolocation","ip","setIp","id","setId","useEffect","fetch","then","result","json","data","className","navigator","cookieEnabled","appName","appCodeName","product","appVersion","userAgent","platform","language","onLine","onClick","readText","text","console","log","getCurrentPosition","pos","crd","coords","value","latitude","longitude","accuracy","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","cookie","uuidv5","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"oSAmGeA,MA9Ff,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,OAGOJ,mBAAS,IAHhB,mBAGNK,EAHM,KAGFC,EAHE,OAION,mBAAS,IAJhB,mBAINO,EAJM,KAIFC,EAJE,KAqDb,OA/CAC,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACG,GAAD,OAAUR,EAAMQ,EAAKT,UA6C7B,yBAAKU,UAAU,OACb,sDACA,6CAAmBC,UAAUC,eAC7B,uCAAaD,UAAUE,SACvB,2CAAiBF,UAAUG,aAC3B,uCAAaH,UAAUI,SAEvB,0CAAgBJ,UAAUK,YAC1B,yCAAeL,UAAUM,WACzB,wCAAcN,UAAUO,UACxB,wCAAcP,UAAUQ,UACxB,sCAAYR,UAAUS,QAKtB,0CAAgBpB,GAEhB,kEACA,wCAEE,4BAAQqB,QA/DQ,WACpBV,UAAUf,UAAU0B,WAAWhB,MAAK,SAACiB,GACnCC,QAAQC,IAAIF,GACZ1B,EAAa0B,QA4DX,kBACC3B,GAEH,0CAEE,4BAAQyB,QA7DS,WAoBrBV,UAAUb,YAAY4B,oBAbtB,SAAiBC,GACf,IAAIC,EAAMD,EAAIE,OACVC,EAAK,2DACQF,EAAIG,SADZ,kCAEOH,EAAII,UAFX,oCAGSJ,EAAIK,SAHb,YAKTlC,EAAe+B,MAGjB,SAAeI,GACbV,QAAQW,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIG,YAjB5B,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAyDV,oBACC1C,GAGH,mEACA,iCAEE,4BAAQuB,QA7CK,WACjB,IAAIZ,EAAO,CACTT,GAAIA,EACJyC,OAAQ9B,UAAUC,eAIdV,EAAKwC,YAAOC,KAAKC,UAAUnC,GADV,wCAErBN,EAAMD,KAqCJ,YACCA,KCjFW2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB3C,WACrBA,UAAU4C,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMvB,c","file":"static/js/main.cd57abd2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { v5 as uuidv5 } from 'uuid';\n\nimport \"./App.css\";\n\nfunction App() {\n  const [clipboard, setClipboard] = useState(\"\");\n  const [geolocation, setGeolocation] = useState(\"\");\n  const [ip, setIp] = useState(\"\");\n  const [id, setId] = useState(\"\");\n\n  useEffect(() => {\n    fetch(`https://api.ipify.org/?format=json`)\n      .then((result) => result.json())\n      .then((data) => setIp(data.ip));\n  });\n\n  const readClipboard = () => {\n    navigator.clipboard.readText().then((text) => {\n      console.log(text);\n      setClipboard(text);\n    });\n  };\n\n  const getGeolocation = () => {\n    let options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0,\n    };\n\n    function success(pos) {\n      let crd = pos.coords;\n      let value = `Your current position is: \n      \\n  Latitude : ${crd.latitude} \n      \\n Longitude: ${crd.longitude} \n      \\n More or less ${crd.accuracy} meters.`;\n\n      setGeolocation(value);\n    }\n\n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  };\n\n  const generateId = () => {\n    let data = {\n      ip: ip,\n      cookie: navigator.cookieEnabled,\n    };\n\n      const MY_NAMESPACE = '091be5fd-9eb4-45af-a4d2-8a0b0f6c8369';\n      let id = uuidv5(JSON.stringify(data), MY_NAMESPACE);\n      setId(id)\n  };\n\n  return (\n    <div className=\"App\">\n      <h2>Totally available data</h2>\n      <p>cookieEnabled: {navigator.cookieEnabled}</p>\n      <p>appName: {navigator.appName}</p>\n      <p>appCodeName: {navigator.appCodeName}</p>\n      <p>product: {navigator.product}</p>\n\n      <p>appVersion: {navigator.appVersion}</p>\n      <p>userAgent: {navigator.userAgent}</p>\n      <p>platform: {navigator.platform}</p>\n      <p>language: {navigator.language}</p>\n      <p>onLine: {navigator.onLine}</p>\n      {/*<p>javaEnabled: {navigator.javaEnabled}</p>*/}\n      {/*<p>credentials: {navigator.credentials.}</p>*/}\n      {/*<p>plugins: {JSON.stringify(navigator.plugins)}</p>*/}\n\n      <p>ip address: {ip}</p>\n\n      <h2>Interesting but sorta safe things:</h2>\n      <p>\n        clipboard:\n        <button onClick={readClipboard}>Read Clipboard</button>\n        {clipboard}\n      </p>\n      <p>\n        geolocation:\n        <button onClick={getGeolocation}>Read GeoLocation</button>\n        {geolocation}\n      </p>\n\n      <h2>Generate ID based on detected data </h2>\n      <p>\n        ID:\n        <button onClick={generateId}>generate</button>\n        {id}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}